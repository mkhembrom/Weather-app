{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","placeholder","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","src","weatherIcon","icon","imgIcon","alt","temp_max","temp_min","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAGMA,EACC,mCADDA,EAEE,2CAFFA,EAGK,mCA8FIC,MA1Ff,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAsCb,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACVH,EAAQG,KAAKC,KAAO,GACpB,WAEF,MALN,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WA/CK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,OAyCVG,YAAY,gBAGS,oBAAhBpB,EAAQG,KACf,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SAnCQ,SAACsB,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC9E,YAAa,UAAW,WAAY,YAKjBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBDE,CAAY,IAAIC,WAGzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,sBAAKF,UAAU,UAAf,UACE,sBAAKA,UAAU,iBAAf,UACA,+BAAOF,EAAQA,QAAQ,GAAGG,OAD1B,IACuC,qBAAKkC,IAnD1C,WACd,IAAMC,EAActC,EAAQA,QAAQ,GAAGuC,KACvC,MAAM,GAAN,OAAU5C,GAAV,OAAwB2C,EAAxB,QAiD6DE,GAAWC,IAAI,YAEhE,qBAAKvC,UAAU,sBAAf,SACD,8CAAiBF,EAAQG,KAAKuC,SAA9B,aAEC,qBAAKxC,UAAU,sBAAf,SACD,8CAAiBF,EAAQG,KAAKwC,SAA9B,sBAOF,SChFEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b7cdfad.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nconst api = {\n  key: \"570dff2e47c343d3ebed4ce245cd5ef4\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n  iconurl: \"http://openweathermap.org/img/w/\"\n  // \"weather?q={city name},{state code},{country code}&appid={API key}\" \n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if(evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  \n  const imgIcon = () => {\n    const weatherIcon = weather.weather[0].icon;\n    return `${api.iconurl}${weatherIcon}.png`;\n  }\n\n  \n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    \n    return `${day} ${date} ${month} ${year}`; \n  }\n\n  return (\n    <div className={\n      (typeof weather.main != \"undefined\") \n        ? ((weather.main.temp > 16)\n          ? 'app warm' \n          : 'app')\n        : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\" \n            className=\"search-bar\" \n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n            placeholder=\"Search...\"\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}°c\n              </div>\n              <div className=\"weather\">\n                <div className=\"weather-detail\">\n                <span>{weather.weather[0].main}</span> <img src={imgIcon()} alt=\"icon\"/>\n                </div>\n                <div className=\"weather-description\">\n               <span>Maximum : {weather.main.temp_max}°c</span>\n                </div>\n                <div className=\"weather-description\">\n               <span>Minimun : {weather.main.temp_min}°c</span>\n                </div>\n              \n              </div>\n            </div>\n\n          </div>\n        ) : ('')}\n        \n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}